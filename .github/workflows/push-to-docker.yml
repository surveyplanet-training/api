name: GitHub Actions Push to DockerHub
on:
  push:
    branches:
      - luka-dev
jobs:
  scan:
    name: npm Audit Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: npm ci
      - uses: oke-py/npm-audit-action@v1.8.4
        with:
          audit_level: moderate
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_assignees: oke-py
          issue_labels: vulnerability,test
          dedupe_issues: true
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: npm install
      - run: npm run build --if-present
      - run: npm test
  semVer:
    name: Semantic Version Job
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout Code
        id: git_checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Semantic Version
        id: semVer
        uses: paulhatch/semantic-version@v4.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: 'v'
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: '(MAJOR)'
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: '(MINOR)'
          # A string to determine the format of the version output
          format: '${major}.${minor}.${patch}-prerelease${increment}'
          # # Optional path to check for changes. If any changes are detected in the path the
          # # 'changed' output will true. Enter multiple paths separated by spaces.
          # change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          # namespace: menu-api
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: true
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
      - name: echo semver
        run: echo '${{ steps.semVer.outputs.version }}'
    outputs:
      version: '${{ steps.semVer.outputs.version }}'
  # run audit
  # audit:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git Checkout Code
  #       uses: actions/checkout@v2
  #       run: npm audit

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git Checkout Code
  #       uses: actions/checkout@v2
  #       run: npm test
  # run test
  docker:
    runs-on: ubuntu-latest
    needs: semVer # audit, test,
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: 'lukamit/menu-api-development:${{ needs.semVer.outputs.version }}'
          target: staging
          secrets: |
            "MONGO=${{ secrets.MONGO }}"
            "LOCAL_ENV= github"

  update-infrastructure:
    name: Update infrastructure version to source version
    runs-on: ubuntu-latest
    needs: [semVer, docker]
    steps:
      - name: Git Checkout Infrastructure
        uses: actions/checkout@v3
        with:
          repository: surveyplanet-training/menu-infrastructure
          ref: luka
          token: ${{ secrets.API_TOKEN_GITHUB }}
          path: ./infrastructure
      - name: Update API deployment
        run: gawk -i inplace '{sub(/menu-api-development.*/,"menu-api-development:${{ needs.semVer.outputs.version }}");print}' infrastructure/manifests/menu/api/deployment.yml
      # - name: Pushes to Infrastructure
      #   uses: dmnemec/copy_file_to_another_repo_action@main
      #   env:
      #     API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      #   with:
      #     source_file: 'infrastructure/manifests/menu/api/deployment.yml'
      #     destination_repo: 'surveyplanet-training/menu-infrastructure'
      #     destination_folder: 'manifests/menu/api/'
      #     destination_branch: 'luka'
      #     user_email: 'automated@github-actions'
      #     user_name: 'luka-automated'
      #     commit_message: 'Automated semVer Update'
      - run: |
          cd infrastructure
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "generated"
          git push
